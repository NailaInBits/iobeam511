"use strict";

var ApiException = require("../exceptions/ApiException");
var RequestResults = require("../constants/RequestResults");
var Utils = require("../utils/Utils");

var _requester = null;

function assertValidPermissions(perms) {

    if (perms === null || !(perms instanceof Object)) {
        throw new ApiException("permissions must be an object");
    }
}

module.exports = {

    initialize: function initialize(requester) {
        Utils.assertValidRequester(requester);
        _requester = requester;
    },

    getUserToken: function getUserToken(username, password, callback) {
        var URL = _requester.getFullEndpoint("/tokens/user");
        var context = {
            username: username,
            password: password
        };

        var req = _requester.getRequest(URL);
        var authStr = "Basic " + new Buffer(username + ":" + password).toString("base64");
        req.set("Authorization", authStr);

        var bodyCb = function bodyCb(resp, body, status) {
            if (status === RequestResults.SUCCESS) {
                resp.body = body;
            } else if (body && body.errors) {
                resp.error = body.errors[0];
            }
        };
        var innerCb = Utils.createInnerCb(callback, context, bodyCb);
        _requester.execute(req, innerCb);
    },

    getProjectToken: function getProjectToken(projectId, permissions, userToken, callback) {
        Utils.assertValidProjectId(projectId);
        Utils.assertValidToken(userToken);
        assertValidPermissions(permissions);
        var context = {
            projectId: projectId,
            permissions: permissions,
            userToken: userToken
        };

        var URL = _requester.getFullEndpoint("/tokens/project");
        var req = _requester.getRequest(URL, userToken);

        var readPerm = permissions.read || false;
        var writePerm = permissions.write || false;
        var adminPerm = permissions.admin || false;
        req.query({ read: readPerm, write: writePerm, admin: adminPerm }).query({ project_id: projectId }).query({ include_user: false });

        var bodyCb = function bodyCb(resp, body, status) {
            if (status === RequestResults.SUCCESS) {
                resp.body = body;
            } else if (body && body.errors) {
                resp.error = body.errors[0];
            }
        };
        var innerCb = Utils.createInnerCb(callback, context, bodyCb);
        _requester.execute(req, innerCb);
    },

    refreshProjectToken: function refreshProjectToken(projectToken, callback) {
        Utils.assertValidToken(projectToken);
        var context = {
            projectToken: projectToken
        };

        var URL = _requester.getFullEndpoint("/tokens/project");
        var reqBody = { refresh_token: projectToken };
        var req = _requester.postRequest(URL, reqBody);

        var bodyHandler = function bodyHandler(resp, body, status) {
            if (status === RequestResults.SUCCESS) {
                resp.body = body;
            } else if (body && body.errors) {
                resp.error = body.errors[0];
            }
        };
        var innerCb = Utils.createInnerCb(callback, context, bodyHandler);
        _requester.execute(req, innerCb);
    }

};