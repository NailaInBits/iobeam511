"use strict";

var jwt = require("jsonwebtoken");

var RequestResults = require("../constants/RequestResults");
var ApiException = require("../exceptions/ApiException");

function isFunction(f) {
    return f !== null && typeof f === "function";
}

function isString(s) {
    return s !== null && typeof s === "string";
}

module.exports = {

    getDefaultApiResp: function getDefaultApiResp(webStatus, webResp) {
        var ret = {
            success: webStatus === RequestResults.SUCCESS,
            timeout: webStatus === RequestResults.TIMEOUT,
            allowed: webStatus !== RequestResults.FORBIDDEN,
            code: webResp ? webResp.status : 0,
            error: null
        };
        if (ret.timeout) {
            ret.error = { "message": "Connection time out" };
        }

        return ret;
    },

    createInnerCb: function createInnerCb(callback, context, handleBody) {
        var utils = this;
        if (!utils.isCallback(callback)) {
            return function () {};
        }

        return function (status, webResp) {
            if (status === RequestResults.PENDING) {
                return;
            }

            var resp = utils.getDefaultApiResp(status, webResp);
            if (!resp.timeout) {
                var body = webResp.type === "application/json" ? webResp.body : webResp.text;
                handleBody(resp, body, status);
            }
            callback(resp, context);
        };
    },

    statusCodeToResult: function statusCodeToResult(status) {
        if (status === 401 || status === 403) {
            return RequestResults.FORBIDDEN;
        } else if (status === 200 || status === 201 || status === 204) {
            return RequestResults.SUCCESS;
        } else {
            return RequestResults.FAILURE;
        }
    },

    isCallback: function isCallback(callback) {
        return isFunction(callback);
    },

    isSet: function isSet(item) {
        return item !== null && typeof item !== "undefined";
    },

    isInArray: function isInArray(needle, array) {
        for (var i in array) {
            if (array[i] === needle) {
                return true;
            }
        }
        return false;
    },

    isExpiredToken: function isExpiredToken(token) {
        var tb64url = token.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
        var decoded = jwt.decode(tb64url);
        return new Date().getTime() >= decoded.exp * 1000;
    },

    assertValidToken: function assertValidToken(token) {
        if (!isString(token)) {
            throw new ApiException("Need a valid token.");
        } else if (token.length <= 0) {
            throw new ApiException("token is too short: " + token.length);
        }
    },

    assertValidProjectId: function assertValidProjectId(projectId) {
        if (projectId === null || typeof projectId === "undefined") {
            throw new ApiException("Invalid projectId (must be int > 0): " + projectId);
        } else if (isNaN(parseInt(projectId)) || parseInt(projectId) <= 0) {
            throw new ApiException("Invalid projectId (must be int > 0): " + projectId);
        }
    },

    assertValidDeviceId: function assertValidDeviceId(deviceId) {
        if (!isString(deviceId)) {
            throw new ApiException("Invalid deviceId (must be a string): " + JSON.stringify(deviceId));
        } else if (deviceId.length <= 0) {
            throw new ApiException("deviceId too short: " + deviceId.length);
        } else if (deviceId.match("[a-zA-Z0-9:_-]+")[0] !== deviceId) {
            throw new ApiException("Device id can only include a-z, A-Z, 0-9, _, :, and -");
        }
    },

    // TODO - change Exception type
    assertValidRequester: function assertValidRequester(requester) {
        if (requester === null || typeof requester === "undefined") {
            throw new ApiException("Invalid requester");
        }
        // Check that it has necessary functions:
        var hasExecute = isFunction(requester.execute);
        var hasGetFullEndpoint = isFunction(requester.getFullEndpoint);
        var hasGetRequest = isFunction(requester.getRequest);
        var hasPostRequest = isFunction(requester.postRequest);

        if (!hasExecute || !hasGetFullEndpoint || !hasGetRequest || !hasPostRequest) {
            throw new ApiException("Invalid requester");
        }
    }
};